name: 'Deploy Backend'

on:
  push:
    branches:
      - main
    paths:
      - apps/aks-web-app
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-deploy:
    name: 'Build and Deploy Backend'
    runs-on: ubuntu-latest
    environment: production
    env:
      ACR_REGISTRY_NAME: ${{secrets.ACR_REGISTRY_NAME}}
      ACR_REGISTRY_USERNAME: ${{secrets.ACR_REGISTRY_USERNAME}}
      ACR_REGISTRY_PASSWORD: ${{secrets.ACR_REGISTRY_PASSWORD}}
      AKS_CLUSTER_NAME: ${{secrets.AKS_CLUSTER_NAME}}
      AKS_CLUSTER_RESOURCE_GROUP: ${{secrets.AKS_CLUSTER_RESOURCE_GROUP}}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: npx nx run aks-web-app:build:production

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_REGISTRY_NAME }}.azurecr.io
          username: ${{ env.ACR_REGISTRY_USERNAME }}
          password: ${{ env.ACR_REGISTRY_PASSWORD }}

      - name: Build and push Docker image to ACR
        run: |
          docker build -f apps/aks-web-app/Dockerfile -t ${{ env.ACR_REGISTRY_NAME }}.azurecr.io/aks-web-app:latest .
          docker push ${{ env.ACR_REGISTRY_NAME }}.azurecr.io/aks-web-app:latest

      - name: Set AKS context
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
          resource-group: ${{ env.AKS_CLUSTER_RESOURCE_GROUP }}

# Create imagepullsecret for Azure Container registry (ACR)
      - name: Create imagepullsecret for Azure Container registry (ACR)
        uses: azure/k8s-actions/k8s-create-secret@master
        with:
          container-registry-url: ${{ env.ACR_REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ env.ACR_REGISTRY_USERNAME }}
          container-registry-password: ${{ env.ACR_REGISTRY_PASSWORD }}
          secret-name: github-k8s-secret
          namespace: whistle-app

      - name: Bake deployment
        uses: azure/k8s-bake@v2
        with:
          renderEngine: "helm"
          helmChart: ./helm
          overrides: |
            replicas:1
            image.repository:${{ env.ACR_REGISTRY_NAME }}.azurecr.io/aks-web-app
            image.tag:latest
          helm-version: "latest"
        id: bake

        # Deploys application based on manifest files from previous step
      - name: Deploy application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          namespace: whistle-app
          imagePullSecrets: |
            github-k8s-secret
          images: |
            ${{ env.ACR_REGISTRY_NAME }}.azurecr.io/aks-web-app:latest
